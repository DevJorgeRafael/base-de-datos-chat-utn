-------------------------------------------------------------------------------------------
-------------------------------------  VISTAS ---------------------------------------------
-------------------------------------------------------------------------------------------
-- Obtener la cuenta, nombre, apellido, por ciclo_academico_codigo y por nombre (buscador)
CREATE OR REPLACE FORCE VIEW MOVIL_UTN.MVL_VIEW_BUSQUEDA_POR_NOMBRES
(TIPO, CUENTA, CEDULA, NOMBRE, EMAIL_INSTITUCIONAL)
BEQUEATH DEFINER
AS 
SELECT "TIPO","CUENTA","CEDULA","NOMBRE","EMAIL_INSTITUCIONAL" FROM (
    -- Estudiantes
    SELECT
        'Estudiante' AS TIPO,
        TU.CUENTA AS CUENTA,
        MA.ESTUDIANTE_CEDULA AS CEDULA,
        INITCAP(
            P.PRIMER_NOMBRE || ' ' || 
            NVL(P.SEGUNDO_NOMBRE, '') || ' ' || 
            P.PRIMER_APELLIDO || ' ' || 
            NVL(P.SEGUNDO_APELLIDO, '')
        ) AS NOMBRE,
        P.EMAIL_INSTITUCIONAL
    FROM UTNDB.ACA_TAB_MATRICULAS MA
    INNER JOIN UTNDB.RHU_TAB_PERSONAS P ON P.CEDULA = MA.ESTUDIANTE_CEDULA
    INNER JOIN UTNDB.INS_TAB_USUARIOS TU ON TU.PERSONA_CEDULA = P.CEDULA
    WHERE MA.CICLO_ACAD_CODIGO IN (
        SELECT RSC.CODIGO_CICLO_ACADEMICO
        FROM MVL_TAB_RED_SOCIAL_CICLOS_ACAD RSC
        WHERE RSC.CICLO_ACAD_ESTADO = 'A'
    )
    AND MA.DEPEN_CODIGO IN (
        SELECT D1.CODIGO
        FROM UTNDB.ACA_TAB_DEPENDENCIAS D1
        JOIN UTNDB.ACA_TAB_DEPENDENCIAS D2 ON D1.DEPEN_CODIGO = D2.CODIGO
        JOIN UTNDB.ACA_TAB_DEPENDENCIAS D3 ON D2.DEPEN_CODIGO = D3.CODIGO
        WHERE D2.CODIGO NOT IN ('00007')
          AND D3.SIGLAS IN ('FACAE', 'FCCSS', 'FECYT', 'FICA', 'FICAYA', 'PO')
    )
    AND MA.NIVEL_CODIGO NOT IN ('99', '00')
    AND MA.ESTADO NOT IN ('P', 'A')

    UNION ALL

    -- Docentes (Solo cuentas que empiezan con 'D')
    SELECT DISTINCT
        'Docente' AS TIPO,
        TU.CUENTA AS CUENTA,
        D.DOCENTE_CEDULA AS CEDULA,
        INITCAP(
            P.PRIMER_NOMBRE || ' ' || 
            NVL(P.SEGUNDO_NOMBRE, '') || ' ' || 
            P.PRIMER_APELLIDO || ' ' || 
            NVL(P.SEGUNDO_APELLIDO, '')
        ) AS NOMBRE,
        P.EMAIL_INSTITUCIONAL
    FROM UTNDB.ACA_TAB_DISTRIBUTIVOS D
    INNER JOIN UTNDB.RHU_TAB_PERSONAS P ON P.CEDULA = D.DOCENTE_CEDULA
    LEFT JOIN UTNDB.INS_TAB_USUARIOS TU ON TU.PERSONA_CEDULA = P.CEDULA
    WHERE D.CICLO_ACAD_CODIGO IN (
        SELECT RSC.CODIGO_CICLO_ACADEMICO
        FROM MVL_TAB_RED_SOCIAL_CICLOS_ACAD RSC
        WHERE RSC.CICLO_ACAD_ESTADO = 'A'
    )
    AND D.DEPEN_CODIGO NOT IN ('00263', '00194')
    AND TU.CUENTA LIKE 'D%'
) T; -- Alias obligatorio para permitir consultas sobre la vista

-- Crear un índice para mejorar el rendimiento de las búsquedas
CREATE INDEX IDX_NOMBRE_UPPER ON UTNDB.RHU_TAB_PERSONAS (UPPER(PRIMER_NOMBRE || ' ' || NVL(SEGUNDO_NOMBRE, '') || ' ' || PRIMER_APELLIDO || ' ' || NVL(SEGUNDO_APELLIDO, '')));


-- Obtener tipo, cuenta, nombre, email institucional por cuenta
CREATE OR REPLACE FORCE VIEW MOVIL_UTN.MVL_VIEW_BUSQUEDA_POR_CUENTA
(TIPO, CUENTA, CEDULA, NOMBRE, EMAIL_INSTITUCIONAL)
BEQUEATH DEFINER
AS 
SELECT
  T.TIPO,
  T.CUENTA,
  T.CEDULA,
  T.NOMBRE,
  T.EMAIL_INSTITUCIONAL
FROM (
  -- Estudiantes
  SELECT
    'Estudiante' AS TIPO,
    TU.CUENTA,
    MA.ESTUDIANTE_CEDULA AS CEDULA,
    INITCAP(
      P.PRIMER_NOMBRE || ' ' ||
      NVL(P.SEGUNDO_NOMBRE, '') || ' ' ||
      P.PRIMER_APELLIDO || ' ' ||
      NVL(P.SEGUNDO_APELLIDO, '')
    ) AS NOMBRE,
    P.EMAIL_INSTITUCIONAL,
    ROW_NUMBER() OVER (PARTITION BY TU.CUENTA ORDER BY MA.CICLO_ACAD_CODIGO DESC) AS RN
  FROM UTNDB.ACA_TAB_MATRICULAS MA
  INNER JOIN UTNDB.RHU_TAB_PERSONAS P ON P.CEDULA = MA.ESTUDIANTE_CEDULA
  INNER JOIN UTNDB.INS_TAB_USUARIOS TU ON TU.PERSONA_CEDULA = P.CEDULA
  WHERE MA.CICLO_ACAD_CODIGO IN (
    SELECT RSC.CODIGO_CICLO_ACADEMICO
    FROM MVL_TAB_RED_SOCIAL_CICLOS_ACAD RSC
    WHERE RSC.CICLO_ACAD_ESTADO = 'A'
  )
  AND MA.DEPEN_CODIGO IN (
    SELECT D1.CODIGO
    FROM UTNDB.ACA_TAB_DEPENDENCIAS D1
    JOIN UTNDB.ACA_TAB_DEPENDENCIAS D2 ON D1.DEPEN_CODIGO = D2.CODIGO
    JOIN UTNDB.ACA_TAB_DEPENDENCIAS D3 ON D2.DEPEN_CODIGO = D3.CODIGO
    WHERE D2.CODIGO NOT IN ('00007')
      AND D3.SIGLAS IN ('FACAE', 'FCCSS', 'FECYT', 'FICA', 'FICAYA')
  )
  AND MA.NIVEL_CODIGO NOT IN ('99', '00')
  AND MA.ESTADO NOT IN ('P', 'A')
  AND P.EMAIL_INSTITUCIONAL IS NOT NULL

  UNION AL
  
  -- Docentes
  SELECT
    'Docente' AS TIPO,
    TU.CUENTA,
    D.DOCENTE_CEDULA AS CEDULA,
    INITCAP(
      P.PRIMER_NOMBRE || ' ' ||
      NVL(P.SEGUNDO_NOMBRE, '') || ' ' ||
      P.PRIMER_APELLIDO || ' ' ||
      NVL(P.SEGUNDO_APELLIDO, '')
    ) AS NOMBRE,
    P.EMAIL_INSTITUCIONAL,
    ROW_NUMBER() OVER (PARTITION BY TU.CUENTA ORDER BY D.CICLO_ACAD_CODIGO DESC) AS RN
  FROM UTNDB.ACA_TAB_DISTRIBUTIVOS D
  INNER JOIN UTNDB.RHU_TAB_PERSONAS P ON P.CEDULA = D.DOCENTE_CEDULA
  LEFT JOIN UTNDB.INS_TAB_USUARIOS TU ON TU.PERSONA_CEDULA = P.CEDULA
  WHERE D.CICLO_ACAD_CODIGO IN (
    SELECT RSC.CODIGO_CICLO_ACADEMICO
    FROM MVL_TAB_RED_SOCIAL_CICLOS_ACAD RSC
    WHERE RSC.CICLO_ACAD_ESTADO = 'A'
  )
  AND D.DEPEN_CODIGO NOT IN ('00263', '00194')
  AND TU.CUENTA LIKE 'D%'
  AND LENGTH(TU.CUENTA) = 11
  AND P.EMAIL_INSTITUCIONAL IS NOT NULL
) T
WHERE T.RN = 1;


------------------------------------------------- ESTUDIANTES ------------------------------------------------
-- Obtener la CODIGO_CLICLO, CICLO_ACADEMICO, CODIGO_CARRERA, NOMBRE_CARRERA, NOMBRE_FACULTAD, SIGLAS_FACULTAD por CEDULA y CICLO_CODIGO
CREATE OR REPLACE VIEW MVL_VIEW_EST_CARR_FACU AS
SELECT
    ca.CODIGO AS CODIGO_CICLO,
    ca.DESCRIPCION AS CICLO_ACADEMICO,
    d1.CODIGO AS CODIGO_CARRERA,
    d1.NOMBRE AS NOMBRE_CARRERA,
    rd.FACULTAD AS NOMBRE_FACULTAD,
    rd.SIGLAS_FAC AS SIGLAS_FACULTAD,
    ec.ESTUDIANTE_CEDULA,
    NULL AS CICLO_FILTRO -- Se agrega esta columna para la segunda consulta
FROM ACA_TAB_ESTUDIANTE_CARRERAS ec
INNER JOIN ACA_TAB_DEPENDENCIAS d1 ON d1.CODIGO = ec.DEPEN_CARRERA
INNER JOIN ACA_TAB_CICLOS_ACADEMICOS ca ON ec.ultimo_ciclo = ca.CODIGO
INNER JOIN REC_VIEW_DEPENDENCIAS rd ON rd.CODIGO_CA = d1.CODIGO
WHERE ec.estado = 'A'

UNION ALL

SELECT
    ca.CODIGO AS CODIGO_CICLO,
    ca.DESCRIPCION AS CICLO_ACADEMICO,
    d1.CODIGO AS CODIGO_CARRERA,
    d1.NOMBRE AS NOMBRE_CARRERA,
    rd.FACULTAD AS NOMBRE_FACULTAD,
    rd.SIGLAS_FAC AS SIGLAS_FACULTAD,
    am.ESTUDIANTE_CEDULA,
    am.CICLO_ACAD_CODIGO AS CICLO_FILTRO -- Se agrega esta columna para filtrar después
FROM ACA_TAB_MATRICULAS am
INNER JOIN ACA_TAB_DEPENDENCIAS d1 ON am.DEPEN_CODIGO = d1.CODIGO
INNER JOIN ACA_TAB_CICLOS_ACADEMICOS ca ON am.CICLO_ACAD_CODIGO = ca.CODIGO
INNER JOIN REC_VIEW_DEPENDENCIAS rd ON rd.CODIGO_CA = d1.CODIGO
WHERE am.ESTADO IN ('M','R','C');



-- Obtener las ASIGNATURAS en las que el estudiante está matriculado por ciclo_academico_codigo y cuenta
CREATE OR REPLACE VIEW MVL_VIEW_EST_MATERIAS AS
SELECT
    TAB_CICLOS_ACADEMICOS.DESCRIPCION AS CICLO_ACADEMICO,
    TAB_MATERIAS.CODIGO AS CODIGO_MATERIA,
    TAB_MATERIAS.DESCRIPCION AS MATERIA,
    TAB_MATRICULAS.CICLO_ACAD_CODIGO AS CICLO_FILTRO,
    USUARIOS.CUENTA AS CUENTA_ESTUDIANTE
FROM
    UTNDB.ACA_TAB_MATERIAS TAB_MATERIAS
    INNER JOIN UTNDB.ACA_TAB_NIVELES TAB_NIVELES
        ON TAB_MATERIAS.NIVEL_CODIGO = TAB_NIVELES.CODIGO
    INNER JOIN UTNDB.ACA_TAB_DETALLE_MATRICULAS TAB_DETALLE_MATRICULAS
        ON TAB_MATERIAS.CODIGO = TAB_DETALLE_MATRICULAS.MATERIA_CODIGO
       AND TAB_MATERIAS.NIVEL_CODIGO = TAB_DETALLE_MATRICULAS.NIVEL_CODIGO
    INNER JOIN UTNDB.ACA_TAB_CICLOS_ACADEMICOS TAB_CICLOS_ACADEMICOS
        ON TAB_CICLOS_ACADEMICOS.CODIGO = TAB_DETALLE_MATRICULAS.CICLO_ACAD_CODIGO
    INNER JOIN UTNDB.ACA_TAB_MATRICULAS TAB_MATRICULAS
        ON TAB_MATRICULAS.CODIGO = TAB_DETALLE_MATRICULAS.MATRICULA_CODIGO
       AND TAB_MATRICULAS.ESTUDIANTE_CEDULA = TAB_DETALLE_MATRICULAS.ESTUDIANTE_CEDULA
    INNER JOIN UTNDB.ACA_TAB_ESTUDIANTES TAB_ESTUDIANTES
        ON TAB_ESTUDIANTES.PERSONA_CEDULA = TAB_DETALLE_MATRICULAS.ESTUDIANTE_CEDULA
    LEFT JOIN UTNDB.INS_TAB_USUARIOS USUARIOS
        ON USUARIOS.PERSONA_CEDULA = TAB_ESTUDIANTES.PERSONA_CEDULA
WHERE
    TAB_DETALLE_MATRICULAS.ANULACION NOT IN ('S')
    AND TAB_MATRICULAS.DEPEN_CODIGO NOT IN ('00263')
    AND TAB_MATRICULAS.ESTADO IN ('R', 'C', 'M')
    AND TAB_MATRICULAS.NIVEL_CODIGO NOT IN ('AD');


--------------------------------------------------- DOCENTES ---------------------------------------------
-- Obtener la CODIGO_CLICLO, CICLO_ACADEMICO, CODIGO_CARRERA, NOMBRE_CARRERA, NOMBRE_FACULTAD, SIGLAS_FACULTAD por CEDULA y CICLO_CODIGO
CREATE OR REPLACE VIEW MVL_VIEW_DOC_CARR_FACU AS
SELECT DISTINCT
    d.CICLO_ACAD_CODIGO AS CODIGO_CICLO,
    c.DESCRIPCION AS CICLO_ACADEMICO,
    rd.CODIGO_CA AS CODIGO_CARRERA,
    rd.CARRERA AS NOMBRE_CARRERA,
    rd.FACULTAD AS NOMBRE_FACULTAD,
    rd.SIGLAS_FAC AS SIGLAS_FACULTAD,
    d.DOCENTE_CEDULA -- Se mantiene para filtrar en la consulta
FROM ACA_TAB_DISTRIBUTIVOS d
INNER JOIN REC_VIEW_DEPENDENCIAS rd
    ON rd.CODIGO_CA = d.DEPEN_CODIGO
INNER JOIN ACA_TAB_CICLOS_ACADEMICOS c
    ON c.CODIGO = d.CICLO_ACAD_CODIGO
WHERE
    --d.NIVEL_CODIGO != '00'
    --AND d.MATERIA_CODIGO NOT IN (
        --SELECT CODIGO FROM ACA_TAB_MATERIAS WHERE TMATERIA_CODIGO IN ('04', '07')
   -- )
    d.DEPEN_CODIGO NOT IN ('00263', '00194');

-- Obtener las materias y la carrera a la que pertenece por ciclo y cedula
CREATE OR REPLACE VIEW MVL_VIEW_DOC_MATERIAS AS
SELECT DISTINCT
    d.CICLO_ACAD_CODIGO AS CODIGO_CICLO,
    c.DESCRIPCION AS CICLO_ACADEMICO,
    d.MATERIA_CODIGO AS CODIGO_MATERIA,
    m.DESCRIPCION AS NOMBRE_MATERIA,
    d.DOCENTE_CEDULA
FROM ACA_TAB_DISTRIBUTIVOS d
INNER JOIN ACA_TAB_MATERIAS m
    ON m.CODIGO = d.MATERIA_CODIGO
INNER JOIN ACA_TAB_CICLOS_ACADEMICOS c
    ON c.CODIGO = d.CICLO_ACAD_CODIGO
LEFT JOIN ACA_TAB_CALENDARIOS_MAT_PENSUM cal
    ON cal.CICLO_ACAD_CODIGO = d.CICLO_ACAD_CODIGO
    AND cal.MATERIA_CODIGO = d.MATERIA_CODIGO
    AND cal.PARALELO_CODIGO = d.PARALELO_CODIGO
WHERE
    --d.NIVEL_CODIGO != '00'
    --AND m.TMATERIA_CODIGO NOT IN ('04', '07')
    AND m.DEPEN_CODIGO NOT IN ('00263', '00194');


-------------------------------------------------------------------------------------------------------------------
--------------------------------------------- CREACION DE TABLAS Y TRIGGERS ---------------------------------------
-------------------------------------------------------------------------------------------------------------------

--------------------------------------------- TABLAS GENERALES ----------------------------------------------------
CREATE TABLE MVL_TAB_TIPO_MENSAJES (
    TIPO_MENSAJE_CODIGO VARCHAR2(10) PRIMARY KEY,
    TIPO_MENSAJE_NOMBRE VARCHAR2(12) UNIQUE NOT NULL,
    TIPO_MENSAJE_DESCRIPCION VARCHAR2(25) UNIQUE NOT NULL
);

CREATE TABLE MVL_TAB_ARCHIVOS (
    ARCHIVO_CODIGO VARCHAR2(10) PRIMARY KEY,
    ARCHIVO_NOMBRE VARCHAR2(100) NOT NULL,
    ARCHIVO_PESO INTEGER NOT NULL,
    ARCHIVO_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (ARCHIVO_ESTADO IN ('A', 'I')),
    ARCHIVO_RUTA VARCHAR2(200) NOT NULL,
    MIME_TYPE VARCHAR2(100) NOT NULL,
    FECHA_SUBIDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE MVL_TAB_ESTADO_ENTREGA_MENSAJE (
    ESTADO_ENTREGA_MENSAJE_CODIGO VARCHAR2(10) PRIMARY KEY,
    ESTADO_ENTREGA_MENSAJE_NOMBRE VARCHAR2(10) UNIQUE NOT NULL
);

CREATE TABLE MVL_TAB_CLAVES_CONVERSACION (
    CLAVE_CONVERSACION_CODIGO VARCHAR2(10) PRIMARY KEY,
    CONVERSACION_CODIGO VARCHAR2(50) NOT NULL,
    CLAVE_BASE64 VARCHAR2(512) NOT NULL,
    CLAVE_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (CLAVE_ESTADO IN ('A', 'I')),
    FECHA_CREACION TIMESTAMP DEFAULT SYSDATE NOT NULL,
    CONSTRAINT UC_CLAVE_CONV UNIQUE (CONVERSACION_CODIGO)
);

CREATE TABLE MVL_TAB_RED_SOCIAL_CICLOS_ACAD (
    CODIGO_RD_CICLO_ACAD VARCHAR2(10) PRIMARY KEY,
    CODIGO_CICLO_ACADEMICO VARCHAR2(10),
    CICLO_ACAD_DESCRIPCION VARCHAR2(100),
    CICLO_ACAD_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (CICLO_ACAD_ESTADO IN ('A', 'I')),
    MENSAJE_APP VARCHAR2(100),
    ESTADO_APP VARCHAR2(1) DEFAULT 'A' CHECK (ESTADO_APP IN ('A', 'I')),
    VERSION_BDD_LOCAL NUMBER(5) DEFAULT 1,
    CICLO_ACAD_FECHA_ASIGNACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



------------------------------------------ TABLAS MENSAJES INDIVIDUALES ---------------------------------------
CREATE TABLE MVL_TAB_CONV_INDIVIDUALES (
    CONVERSACION_INDIVIDUAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    CUENTA_1 VARCHAR2(11) NOT NULL,
    CUENTA_2 VARCHAR2(11) NOT NULL,
    CONVERSACION_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (CONVERSACION_ESTADO IN ('A', 'I'))
);

CREATE TABLE MVL_TAB_MSJ_INDIVIDUALES (
    MENSAJE_INDIVIDUAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    CONVERSACION_CODIGO VARCHAR2(10) NOT NULL,
    EMISOR_CUENTA VARCHAR2(11) NOT NULL,
    RECEPTOR_CUENTA VARCHAR2(11) NOT NULL,
    MENSAJE_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (MENSAJE_ESTADO IN ('A', 'I')),
    TIPO_MENSAJE_CODIGO VARCHAR2(10) NOT NULL,
    ARCHIVO_CODIGO VARCHAR2(10),
    CONTENIDO CLOB,
    FECHA TIMESTAMP DEFAULT SYSDATE NOT NULL,
    MENSAJE_PADRE_CODIGO VARCHAR2(10),
    FOREIGN KEY (CONVERSACION_CODIGO) REFERENCES MVL_TAB_CONV_INDIVIDUALES(CONVERSACION_INDIVIDUAL_CODIGO) ON DELETE CASCADE,
    FOREIGN KEY (TIPO_MENSAJE_CODIGO) REFERENCES MVL_TAB_TIPO_MENSAJES(TIPO_MENSAJE_CODIGO),
    FOREIGN KEY (ARCHIVO_CODIGO) REFERENCES MVL_TAB_ARCHIVOS(ARCHIVO_CODIGO),
    FOREIGN KEY (MENSAJE_PADRE_CODIGO) REFERENCES MVL_TAB_MSJ_INDIVIDUALES(MENSAJE_INDIVIDUAL_CODIGO) ON DELETE CASCADE
);

CREATE TABLE MVL_TAB_LECTURA_MSJ_INDIVIDUAL (
    LECTURA_MSJ_INDIVIDUAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    MENSAJE_CODIGO VARCHAR2(10) NOT NULL,
    ESTADO_MENSAJE_CODIGO VARCHAR2(10) NOT NULL,
    LECTURA_MENSAJE_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (LECTURA_MENSAJE_ESTADO IN ('A', 'I')),
    FECHA_LECTURA TIMESTAMP DEFAULT SYSDATE NOT NULL,
    FOREIGN KEY (MENSAJE_CODIGO) REFERENCES MVL_TAB_MSJ_INDIVIDUALES(MENSAJE_INDIVIDUAL_CODIGO) ON DELETE CASCADE,
    FOREIGN KEY (ESTADO_MENSAJE_CODIGO) REFERENCES MVL_TAB_ESTADO_ENTREGA_MENSAJE(ESTADO_ENTREGA_MENSAJE_CODIGO),
    CONSTRAINT UC_MENSAJE_CODIGO UNIQUE (MENSAJE_CODIGO)
);



------------------------------------------ TABLAS MENSAJES GRUPALES ---------------------------------------
CREATE TABLE MVL_TAB_TIPOS_CONV_GRUPALES (
    TIPO_CONV_GRUPAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    TIPO_CONV_GRUPAL_NOMBRE VARCHAR2(10) NOT NULL,
    TIPO_CONV_GRUPAL_CATEGORIA VARCHAR2(1) NOT NULL CHECK (TIPO_CONV_GRUPAL_CATEGORIA IN ('G', 'D'))
);

CREATE TABLE MVL_TAB_CONV_GRUPALES (
    CONVERSACION_GRUPAL_CODIGO VARCHAR2(50) PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL,
    CONVERSACION_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (CONVERSACION_ESTADO IN ('A', 'I')),
    TIPO_CONV_GRUPAL_CODIGO VARCHAR2(10) NOT NULL,
    FOREIGN KEY (TIPO_CONV_GRUPAL_CODIGO) REFERENCES MVL_TAB_TIPOS_CONV_GRUPALES(TIPO_CONV_GRUPAL_CODIGO)
);

CREATE TABLE MVL_TAB_MSJ_GRUPALES (
    MENSAJE_GRUPAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    CONVERSACION_CODIGO VARCHAR2(50) NOT NULL,
    EMISOR_CUENTA VARCHAR2(11) NOT NULL,
    MENSAJE_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (MENSAJE_ESTADO IN ('A', 'I')),
    TIPO_MENSAJE_CODIGO VARCHAR2(10) NOT NULL,
    ARCHIVO_CODIGO VARCHAR2(10),
    CONTENIDO CLOB,
    FECHA TIMESTAMP DEFAULT SYSDATE NOT NULL,
    MENSAJE_PADRE_CODIGO VARCHAR2(10),
    FOREIGN KEY (CONVERSACION_CODIGO) REFERENCES MVL_TAB_CONV_GRUPALES(CONVERSACION_GRUPAL_CODIGO) ON DELETE CASCADE,
    FOREIGN KEY (TIPO_MENSAJE_CODIGO) REFERENCES MVL_TAB_TIPO_MENSAJES(TIPO_MENSAJE_CODIGO),
    FOREIGN KEY (ARCHIVO_CODIGO) REFERENCES MVL_TAB_ARCHIVOS(ARCHIVO_CODIGO),
    FOREIGN KEY (MENSAJE_PADRE_CODIGO) REFERENCES MVL_TAB_MSJ_GRUPALES(MENSAJE_GRUPAL_CODIGO) ON DELETE CASCADE
);

CREATE TABLE MVL_TAB_LECTURA_MSJ_GRUPALES (
    LECTURA_MENSAJE_GRUPAL_CODIGO VARCHAR2(10) PRIMARY KEY,
    MENSAJE_CODIGO VARCHAR2(10) NOT NULL,
    USUARIO_CUENTA VARCHAR2(11) NOT NULL,
    LECTURA_MSJ_GRPL_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (LECTURA_MSJ_GRPL_ESTADO IN ('A', 'I')),
    ESTADO_ENTREGA_MSJ_CODIGO VARCHAR2(10) NOT NULL,
    FECHA_LECTURA TIMESTAMP DEFAULT SYSDATE NOT NULL,
    FOREIGN KEY (MENSAJE_CODIGO) REFERENCES MVL_TAB_MSJ_GRUPALES(MENSAJE_GRUPAL_CODIGO) ON DELETE CASCADE,
    FOREIGN KEY (ESTADO_ENTREGA_MSJ_CODIGO) REFERENCES MVL_TAB_ESTADO_ENTREGA_MENSAJE(ESTADO_ENTREGA_MENSAJE_CODIGO)
);


-- TABLA DE SILENCIO EN CONVERSACIONES
CREATE TABLE MVL_TAB_SILENCIO_CONVERSACION (
    SILENCIO_CONVERSACIONES_CODIGO VARCHAR2(10) PRIMARY KEY,
    USUARIO_CUENTA VARCHAR2(11) NOT NULL,
    SILENCIO_CONVERSACION_ESTADO VARCHAR2(1) DEFAULT 'A' CHECK (SILENCIO_CONVERSACION_ESTADO IN ('A', 'I')),
    CONVERSACION_INDIVIDUAL_CODIGO VARCHAR2(10),
    CONVERSACION_GRUPAL_CODIGO VARCHAR2(50)
);


---------------------------------------------------------------------------------------------------------------
--------------------------DATOS ESTÁTICOS PARA LOS FOREIGN KEYS -----------------------------------------------
---------------------------------------------------------------------------------------------------------------
---datos para MVL_TAB_TIPOS_CONV_GRUPALES
INSERT INTO MVL_TAB_TIPOS_CONV_GRUPALES (TIPO_CONV_GRUPAL_CODIGO, TIPO_CONV_GRUPAL_NOMBRE, TIPO_CONV_GRUPAL_CATEGORIA)
VALUES ('0000000001', 'Materia', 'G');

INSERT INTO MVL_TAB_TIPOS_CONV_GRUPALES (TIPO_CONV_GRUPAL_CODIGO, TIPO_CONV_GRUPAL_NOMBRE, TIPO_CONV_GRUPAL_CATEGORIA)
VALUES ('0000000002', 'Carrera', 'G');

INSERT INTO MVL_TAB_TIPOS_CONV_GRUPALES (TIPO_CONV_GRUPAL_CODIGO, TIPO_CONV_GRUPAL_NOMBRE, TIPO_CONV_GRUPAL_CATEGORIA)
VALUES ('0000000003', 'Facultad', 'G');

INSERT INTO MVL_TAB_TIPOS_CONV_GRUPALES (TIPO_CONV_GRUPAL_CODIGO, TIPO_CONV_GRUPAL_NOMBRE, TIPO_CONV_GRUPAL_CATEGORIA)
VALUES ('0000000004', 'Carrera', 'D');

INSERT INTO MVL_TAB_TIPOS_CONV_GRUPALES (TIPO_CONV_GRUPAL_CODIGO, TIPO_CONV_GRUPAL_NOMBRE, TIPO_CONV_GRUPAL_CATEGORIA)
VALUES ('0000000005', 'Facultad', 'D');


--datos para MVL_TAB_TIPO_MENSAJES
INSERT INTO MVL_TAB_TIPO_MENSAJES (TIPO_MENSAJE_CODIGO, TIPO_MENSAJE_NOMBRE, TIPO_MENSAJE_DESCRIPCION)
VALUES ('0000000001', 'Texto', 'Tipo Texto');

INSERT INTO MVL_TAB_TIPO_MENSAJES (TIPO_MENSAJE_CODIGO, TIPO_MENSAJE_NOMBRE, TIPO_MENSAJE_DESCRIPCION)
VALUES ('0000000002', 'Imagen', 'Tipo Imagen');

INSERT INTO MVL_TAB_TIPO_MENSAJES (TIPO_MENSAJE_CODIGO, TIPO_MENSAJE_NOMBRE, TIPO_MENSAJE_DESCRIPCION)
VALUES ('0000000003', 'Archivo', 'Tipo Archivo');

INSERT INTO MVL_TAB_TIPO_MENSAJES (TIPO_MENSAJE_CODIGO, TIPO_MENSAJE_NOMBRE, TIPO_MENSAJE_DESCRIPCION)
VALUES ('0000000004', 'Eliminado', 'Mensaje eliminado por el emisor');


--datos para MVL_TAB_ESTADO_ENTREGA_MENSAJE
INSERT INTO MVL_TAB_ESTADO_ENTREGA_MENSAJE (ESTADO_ENTREGA_MENSAJE_CODIGO, ESTADO_ENTREGA_MENSAJE_NOMBRE)
VALUES ('0000000001', 'Enviado');

INSERT INTO MVL_TAB_ESTADO_ENTREGA_MENSAJE (ESTADO_ENTREGA_MENSAJE_CODIGO, ESTADO_ENTREGA_MENSAJE_NOMBRE)
VALUES ('0000000002', 'Recibido');

INSERT INTO MVL_TAB_ESTADO_ENTREGA_MENSAJE (ESTADO_ENTREGA_MENSAJE_CODIGO, ESTADO_ENTREGA_MENSAJE_NOMBRE)
VALUES ('0000000003', 'Leído');




-- ÍNDICES PARA MEJORAR EL RENDIMIENTO
CREATE INDEX IDX_MSJ_EMISOR ON MVL_TAB_MSJ_INDIVIDUALES(EMISOR_CUENTA);
CREATE INDEX IDX_MSJ_RECEPTOR ON MVL_TAB_MSJ_INDIVIDUALES(RECEPTOR_CUENTA);
CREATE INDEX IDX_LECTURA_MSJ_IND ON MVL_TAB_LECTURA_MSJ_INDIVIDUAL(MENSAJE_CODIGO);
CREATE INDEX IDX_LECTURA_MSJ_GRP ON MVL_TAB_LECTURA_MSJ_GRUPALES(MENSAJE_CODIGO);

CREATE INDEX IDX_SILENCIO_USU_IND
  ON MVL_TAB_SILENCIO_CONVERSACION (USUARIO_CUENTA, CONVERSACION_INDIVIDUAL_CODIGO);

CREATE INDEX IDX_SILENCIO_USU_GRUP
  ON MVL_TAB_SILENCIO_CONVERSACION (USUARIO_CUENTA, CONVERSACION_GRUPAL_CODIGO);

---------------------------------------------------------------------------------------------------------------
------------------------- TRIGGERS PARA QUE EL CODIGO SEA AUTOINCREMENTAL--------------------------------------
---------------------------------------------------------------------------------------------------------------
CREATE SEQUENCE MVL_SEQ_SILENCIO_CONVERSACION START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_SILENCIO_CONVERSACION
BEFORE INSERT ON MVL_TAB_SILENCIO_CONVERSACION
FOR EACH ROW
BEGIN
    :NEW.SILENCIO_CONVERSACIONES_CODIGO := LPAD(MVL_SEQ_SILENCIO_CONVERSACION.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_CONV_INDIVIDUAL START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_CONV_INDIVIDUALES
BEFORE INSERT ON MVL_TAB_CONV_INDIVIDUALES
FOR EACH ROW
BEGIN
    :NEW.CONVERSACION_INDIVIDUAL_CODIGO := LPAD(MVL_SEQ_CONV_INDIVIDUAL.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_MSJ_GRUPAL START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_MSJ_GRUPALES
BEFORE INSERT ON MVL_TAB_MSJ_GRUPALES
FOR EACH ROW
BEGIN
    :NEW.MENSAJE_GRUPAL_CODIGO := LPAD(MVL_SEQ_MSJ_GRUPAL.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_MSJ_INDIVIDUAL START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_MSJ_INDIVIDUALES
BEFORE INSERT ON MVL_TAB_MSJ_INDIVIDUALES
FOR EACH ROW
BEGIN
    :NEW.MENSAJE_INDIVIDUAL_CODIGO := LPAD(MVL_SEQ_MSJ_INDIVIDUAL.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_LECTURA_MSJ_GRUPAL START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_LECTURA_MSJ_GRUPALES
BEFORE INSERT ON MVL_TAB_LECTURA_MSJ_GRUPALES
FOR EACH ROW
BEGIN
    :NEW.LECTURA_MENSAJE_GRUPAL_CODIGO := LPAD(MVL_SEQ_LECTURA_MSJ_GRUPAL.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_LECTURA_MSJ_INDIV START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_LECTURA_MSJ_INDIVIDUAL
BEFORE INSERT ON MVL_TAB_LECTURA_MSJ_INDIVIDUAL
FOR EACH ROW
BEGIN
    :NEW.LECTURA_MSJ_INDIVIDUAL_CODIGO := LPAD(MVL_SEQ_LECTURA_MSJ_INDIV.NEXTVAL, 10, '0');
END;
/


CREATE SEQUENCE MVL_SEQ_ARCHIVO START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_ARCHIVOS
BEFORE INSERT ON MVL_TAB_ARCHIVOS
FOR EACH ROW
BEGIN
    :NEW.ARCHIVO_CODIGO := LPAD(MVL_SEQ_ARCHIVO.NEXTVAL, 10, '0');
END;
/

CREATE SEQUENCE MVL_SEQ_CLAVE_CONVERSACION START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_CLAVES_CONVERSACION
BEFORE INSERT ON MVL_TAB_CLAVES_CONVERSACION
FOR EACH ROW
BEGIN
    :NEW.CLAVE_CONVERSACION_CODIGO := LPAD(MVL_SEQ_CLAVE_CONVERSACION.NEXTVAL, 10, '0');
END;
/

CREATE SEQUENCE MVL_SEQ_CICLO_ACAD START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER MVL_TRG_CICLOS_ACAD
BEFORE INSERT ON MVL_TAB_RED_SOCIAL_CICLOS_ACAD
FOR EACH ROW
BEGIN
  :NEW.CODIGO_RD_CICLO_ACAD := LPAD(MVL_SEQ_CICLO_ACAD.NEXTVAL, 10, '0');
END;
/


-- ÍNDICES PARA SINCRONIZACION
CREATE INDEX IDX_MSJ_INDIVIDUALES_ELIMINADOS
ON MVL_TAB_MSJ_INDIVIDUALES (
  CONVERSACION_CODIGO,
  TIPO_MENSAJE_CODIGO,
  MENSAJE_ESTADO,
  MENSAJE_INDIVIDUAL_CODIGO
);



CREATE INDEX IDX_MSJ_INDIVIDUALES_SYNC
ON MVL_TAB_MSJ_INDIVIDUALES (
  CONVERSACION_CODIGO,
  MENSAJE_INDIVIDUAL_CODIGO,
  MENSAJE_ESTADO,
  FECHA
);


CREATE INDEX IDX_LECTURA_MSJ_ESTADO
ON MVL_TAB_LECTURA_MSJ_INDIVIDUAL (
  MENSAJE_CODIGO,
  LECTURA_MENSAJE_ESTADO,
  ESTADO_MENSAJE_CODIGO
);



---------------------------------------------------------------------------------------------------------------
------------------------------------------- PROCEDIMIENTOS ----------------------------------------------------
---------------------------------------------------------------------------------------------------------------
-- Procedimiento para inactivar datos de red social
CREATE OR REPLACE PROCEDURE MVL_PROC_INACTIVAR_DATOS_RS AS
BEGIN
    -- Claves de conversación
    UPDATE MVL_TAB_CLAVES_CONVERSACION
       SET CLAVE_ESTADO = 'I'
     WHERE CLAVE_ESTADO = 'A';

    -- Conversaciones individuales
    UPDATE MVL_TAB_CONV_INDIVIDUALES
       SET CONVERSACION_ESTADO = 'I'
     WHERE CONVERSACION_ESTADO = 'A';

    -- Mensajes individuales
    UPDATE MVL_TAB_MSJ_INDIVIDUALES
       SET MENSAJE_ESTADO = 'I'
     WHERE MENSAJE_ESTADO = 'A';

    -- Lectura mensajes individuales
    UPDATE MVL_TAB_LECTURA_MSJ_INDIVIDUAL
       SET LECTURA_MENSAJE_ESTADO = 'I'
     WHERE LECTURA_MENSAJE_ESTADO = 'A';

    -- Conversaciones grupales
    UPDATE MVL_TAB_CONV_GRUPALES
       SET CONVERSACION_ESTADO = 'I'
     WHERE CONVERSACION_ESTADO = 'A';

    -- Mensajes grupales
    UPDATE MVL_TAB_MSJ_GRUPALES
       SET MENSAJE_ESTADO = 'I'
     WHERE MENSAJE_ESTADO = 'A';

    -- Lectura mensajes grupales
    UPDATE MVL_TAB_LECTURA_MSJ_GRUPALES
       SET LECTURA_MSJ_GRPL_ESTADO = 'I'
     WHERE LECTURA_MSJ_GRPL_ESTADO = 'A';

    -- Silencio de conversaciones
    UPDATE MVL_TAB_SILENCIO_CONVERSACION
       SET SILENCIO_CONVERSACION_ESTADO = 'I'
     WHERE SILENCIO_CONVERSACION_ESTADO = 'A';

    COMMIT;
END;
/



---------------------------------------------------------------------------------------------------------------
------------------------------------ RUTA Y PROCEDIMIENTO PARA ARCHIVOS ---------------------------------------
---------------------------------------------------------------------------------------------------------------

-- Crear un directorio en el servidor de base de datos para almacenar los archivos y darle permisos al usuario
CREATE OR REPLACE DIRECTORY UTN_MOVIL_RED_SOCIAL_DIR AS '/utn_movil/red_social/archivos'; -- Aqui es donde se asigna la ruta del directorio creado con los permisos de escritura y lectura


---------------- Procedimiento para insertar un archivo en la tabla MVL_TAB_ARCHIVOS --------------------------
CREATE OR REPLACE PROCEDURE UTNDB.SUBIR_ARCHIVO_RED_SOCIAL_PROC (
    pNombreArchivo    IN VARCHAR2,
    pPeso             IN NUMBER,
    pMimeType         IN VARCHAR2,
    pBlob             IN BLOB,
    pUsuario          IN VARCHAR2,
    pArchivoCodigo    OUT VARCHAR2
)
AS
    vNombreUnico      VARCHAR2(300);
    vRutaRelativa     VARCHAR2(300);
BEGIN
    -- Generar nombre único
    vNombreUnico := TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3') || '_' || REPLACE(pNombreArchivo, ' ', '_');

    -- Definir la ruta lógica (esto puede ser solo nombre o con carpeta lógica)
    vRutaRelativa := 'UTN_MOVIL_RED_SOCIAL_DIR/' || vNombreUnico;

    -- Insertar metadata (el trigger genera ARCHIVO_CODIGO)
    INSERT INTO MOVIL_UTN.MVL_TAB_ARCHIVOS (
        ARCHIVO_NOMBRE,
        ARCHIVO_PESO,
        ARCHIVO_ESTADO,
        ARCHIVO_RUTA,
        MIME_TYPE,
        FECHA_SUBIDA
    )
    VALUES (
        pNombreArchivo,
        pPeso,
        'A',
        vRutaRelativa,
        pMimeType,
        SYSDATE
    )
    RETURNING ARCHIVO_CODIGO INTO pArchivoCodigo;

    -- Guardar físicamente
    BLOB_TO_FILE(
        p_blob => pBlob,
        p_dir => 'UTN_MOVIL_RED_SOCIAL_DIR',
        p_filename => vNombreUnico
    );

EXCEPTION
    WHEN OTHERS THEN
        pArchivoCodigo := NULL;
        RAISE_APPLICATION_ERROR(-20001, 'Error al subir el archivo de red social: ' || SQLERRM);
END;
/

